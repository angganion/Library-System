type Book = record {
  id : text;
  name : text;
  createdAt : nat64;
  dipinjam : bool;
};
type Errors = record { booksDoesNotExist : text; UserDoesNotExist : text };
type User = record {
  id : text;
  sessionIds : vec text;
  name : text;
  createdAt : nat64;
  bukuDipinjam : vec text;
};
type _AzleResult = variant { Ok : Book; Err : text };
type _AzleResult_1 = variant { Ok : Book; Err : Errors };
type _AzleResult_2 = variant { Ok : User; Err : Errors };
type _AzleResult_3 = variant { Ok : User; Err : text };
service : () -> {
  borrowBook : (text, text) -> (_AzleResult);
  createBook : (text) -> (_AzleResult_1);
  createUser : (text) -> (_AzleResult_2);
  getAllBook : () -> (vec Book) query;
  getAllUsers : () -> (vec User) query;
  getBookById : (text) -> (_AzleResult) query;
  getUserById : (text) -> (_AzleResult_3) query;
  returnBook : (text, text) -> (_AzleResult);
}